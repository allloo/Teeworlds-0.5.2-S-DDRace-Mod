CheckVersion("0.2")

Import("datasrc/sdl.bam")


--- Setup Config --------
config = NewConfig()
config:Add(OptFindCompiler())
config:Add(OptTestCompileC("stackprotector", "int main(){return 0;}", "-fstack-protector -fstack-protector-all"))
config:Add(OptFindLibrary("zlib", "zlib.h", false))
--config:Add(OptFindLibrary("sdl", false))
config:Add(SDL.OptFind("sdl", true))

if family == "windows" then
	config:Finalize("config-windows.bam")
else
	config:Finalize("config-unix.bam")
end

-- data compiler
function Script(name)
    if family == "windows" then
--        return str_replace(name, "/", "\\")    <--- this was the old line 
        return "C:\\Python26\\python.exe " .. str_replace(name, "/", "\\") 
    end
    return "python " .. name
end

function ContentCompile(action, output)
	output = Path(output)
	AddJob(
		output,
		action .. " > " .. output,
		Script("datasrc/compile.py") .. " " .. action .. " > " .. Path(output)
	)
	AddDependency(output, Path("datasrc/content.py")) -- do this more proper
	AddDependency(output, Path("datasrc/network.py"))
	AddDependency(output, Path("datasrc/compile.py"))
	AddDependency(output, Path("datasrc/datatypes.py"))
	return output
end

-- Content Compile
network_source = ContentCompile("network_source", "src/game/generated/g_protocol.cpp")
network_header = ContentCompile("network_header", "src/game/generated/g_protocol.hpp")
server_content_source = ContentCompile("server_content_source", "src/game/generated/gs_data.cpp")
server_content_header = ContentCompile("server_content_header", "src/game/generated/gs_data.hpp")

AddDependency(network_source, network_header)
AddDependency(server_content_source, server_content_header)


function Intermediate_Output(settings, input)
	return Path("objs/" .. PathBase(PathFilename(input)) .. settings.config_ext)
end

function build(settings)
	--settings.objdir = Path("objs")
	settings.cc.Output = Intermediate_Output

	if config.compiler.value == "cl" then
		settings.cc.flags:Add("/wd4244")
	else
		settings.cc.flags:Add("-Wall", "-fno-exceptions")
		if platform == "macosx" then
			settings.cc.flags:Add("-mmacosx-version-min=10.4", "-isysroot /Developer/SDKs/MacOSX10.4u.sdk")
			settings.link.flags:Add("-mmacosx-version-min=10.4", "-isysroot /Developer/SDKs/MacOSX10.4u.sdk")
		elseif config.stackprotector.value == 1 then
			settings.cc.flags:Add("-fstack-protector", "-fstack-protector-all")
			settings.link.flags:Add("-fstack-protector", "-fstack-protector-all")
		end
	end

	-- set some platform specific settings
	settings.cc.includes:Add("src")

	if family == "unix" then
   		if platform == "macosx" then
			settings.link.frameworks:Add("Carbon")
			settings.link.frameworks:Add("AppKit")
		else
			settings.link.libs:Add("pthread")
		end
	elseif family == "windows" then
		settings.link.libs:Add("gdi32")
		settings.link.libs:Add("user32")
		settings.link.libs:Add("ws2_32")
		settings.link.libs:Add("ole32")
		settings.link.libs:Add("shell32")
	end
	
	-- compile zlib if needed
	if config.zlib.value == 1 then
		settings.link.libs:Add("z")
		if config.zlib.include_path then
			settings.cc.includes:Add(config.zlib.include_path)
		end
		zlib = {}
	else
		zlib = Compile(settings, Collect("src/engine/zlib/*.c"))
		settings.cc.includes:Add("src/engine/zlib")
	end
	
	-- build game components
	engine_settings = settings:Copy()
	server_settings = engine_settings:Copy()
	
	engine = Compile(engine_settings, Collect("src/engine/*.c", "src/base/*.c"))
	server = Compile(server_settings, Collect("src/engine/server/*.c"))

	game_shared = Compile(settings, Collect("src/game/*.cpp"), network_source)
	game_server = Compile(settings, CollectRecursive("src/game/server/*.cpp"), server_content_source)

	server_osxlaunch = {}
	if platform == "macosx" then
		server_osxlaunch = Compile(launcher_settings, "src/osxlaunch/server.m")
	end
	
	-- build server

	server_exe = Link(server_settings, "DDRace-Small", engine, server,
		game_shared, game_server, zlib)

	serverlaunch = {}
	if platform == "macosx" then
		serverlaunch = Link(launcher_settings, "serverlaunch", server_osxlaunch)
	end

	-- make targets
	s = PseudoTarget("server".."_"..settings.config_name, server_exe, serverlaunch)
	g = PseudoTarget("game".."_"..settings.config_name, server_exe)

	Target(s)
	
	all = PseudoTarget(settings.config_name,s)

	Target(all)
	return all
end


debug_settings = NewSettings()
debug_settings.config_name = "debug"
debug_settings.config_ext = "_d"
debug_settings.debug = 1
debug_settings.cc.optimize = 0
debug_settings.cc.defines:Add("CONF_DEBUG")

release_settings = NewSettings()
release_settings.config_name = "release"
release_settings.config_ext = ""
release_settings.debug = 0
release_settings.cc.optimize = 1
release_settings.cc.defines:Add("CONF_RELEASE")

if platform == "macosx"  and arch == "ia32" then
	debug_settings_ppc = debug_settings:Copy()
	debug_settings_ppc.config_name = "debug_ppc"
	debug_settings_ppc.config_ext = "_ppc_d"
	debug_settings_ppc.cc.flags:Add("-arch ppc")
	debug_settings_ppc.link.flags:Add("-arch ppc")
	debug_settings_ppc.cc.defines:Add("CONF_DEBUG")

	release_settings_ppc = release_settings:Copy()
	release_settings_ppc.config_name = "release_ppc"
	release_settings_ppc.config_ext = "_ppc"
	release_settings_ppc.cc.flags:Add("-arch ppc")
	release_settings_ppc.link.flags:Add("-arch ppc")
	release_settings_ppc.cc.defines:Add("CONF_RELEASE")

	debug_settings_x86 = debug_settings:Copy()
	debug_settings_x86.config_name = "debug_x86"
	debug_settings_x86.config_ext = "_x86_d"
	debug_settings_x86.cc.defines:Add("CONF_DEBUG")

	release_settings_x86 = release_settings:Copy()
	release_settings_x86.config_name = "release_x86"
	release_settings_x86.config_ext = "_x86"
	release_settings_x86.cc.defines:Add("CONF_RELEASE")

	ppc_d = build(debug_settings_ppc)
	x86_d = build(debug_settings_x86)
	ppc_r = build(release_settings_ppc)
	x86_r = build(release_settings_x86)
	DefaultTarget("game_debug_x86")
	PseudoTarget("release", ppc_r, x86_r)
	PseudoTarget("debug", ppc_d, x86_d)

	PseudoTarget("server_release", "server_release_x86", "server_release_ppc")
	PseudoTarget("server_debug", "server_debug_x86", "server_debug_ppc")
else
	build(debug_settings)
	build(release_settings)
	DefaultTarget("game_debug")
end

